---
---
<style>
    @import url('https://fonts.googleapis.com/css2?family=DotGothic16&display=swap');
</style>

<div id="three-container" style="width: 100%; height: 100vh; overflow: hidden; position: relative;"></div>

<script>
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import { CSS2DRenderer, CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';
    import * as TWEEN from '@tweenjs/tween.js';

    console.log('--- Estamos m e l o s!!!!---');

    // Constants
    const DOT_SIZE = 0.7;


    const container = document.getElementById('three-container');
    if (!container) {
        console.error('Three container not found!');
        throw new Error('Three container not found');
    }

    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xE5E4E2);

    // CAMERA
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 20;
    camera.position.y = 8;

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    // ORBIT CONTROLS
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.screenSpacePanning = false;
    controls.maxPolarAngle = Math.PI / 2;

    // RAYCASTER
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    // CSS2DRenderer
    const labelRenderer = new CSS2DRenderer();
    labelRenderer.setSize(window.innerWidth, window.innerHeight);
    labelRenderer.domElement.style.position = 'absolute';
    labelRenderer.domElement.style.top = '0px';
    labelRenderer.domElement.style.pointerEvents = 'none';
    container.appendChild(labelRenderer.domElement);

    // HOMEPAGE > SECTION DATA
    const sectionData = [
        { name: 'Home', link: '/', radius: 3, angle: Math.PI * 0, color: 0xa49cff },
        { name: 'Projects', link: '/projects', radius: 20, angle: Math.PI * 4, color: 0xa49cff },
        { name: 'Design', link: '/design', radius: 10, angle: Math.PI * 1, color: 0xa49cff },
        { name: 'About Me', link: '/about', radius: 15, angle: Math.PI * 1.5, color: 0xa49cff },
        { name: 'Archive', link: '/archive', radius: 20, angle: Math.PI * 5, color: 0xF0E68C },
    ];

    // Placeholder Project Data
    const projectsData = [
        { id: 'project-1', title: 'How to shit on your company', year: 2025, imageUrl: '/images/projects/project1-icon.png', linkToMarkdown: '/projects/shitmolo' },
        { id: 'project-2', title: 'Aura Coffee Company', year: 2025, imageUrl: '/images/projects/project2-icon.png', linkToMarkdown: '/projects/data-dashboard' },
        { id: 'project-3', title: 'Pandemica', year: 2022, imageUrl: '/images/projects/ecommerce-redesign-icon.png', linkToMarkdown: '/projects/ecommerce-redesign' },
        { id: 'project-4', title: 'Noctambulas Permanentes', year: 2020, imageUrl: '/images/projects/mobile-app-icon.png', linkToMarkdown: '/projects/mobile-app' },
        { id: 'project-5', title: 'Ahora sin cielo abierto', year: 2020, imageUrl: '/images/projects/brand-identity-icon.png', linkToMarkdown: '/projects/brand-identity' },
        { id: 'comadre', title: 'Que no le pase Comadre!', year: 2022, imageUrl: '/images/projects/comadre-icon.png', linkToMarkdown: 'pages/projects/comadre' },
    ];

    // STORE REFERENCES FOR DOTS - with proper typing
    const sectionDots: THREE.Mesh[] = [];
    let projectsExpanded = false;
    const projectDots: THREE.Mesh[] = [];
    const connectionLines: THREE.Line[] = [];
    let projectsMainDot: THREE.Mesh | null = null;

    // TRAIL LONGITUDE
    const MAX_TRAIL_POINTS = 2000;

    // CENTRAL IMAGE IMPLEMENTATION
    const textureLoader = new THREE.TextureLoader();
    const centralTexture = textureLoader.load('/images/homepage/center_dot_gaussian.png');

    // Option A: PlaneGeometry for a 2D "billboard" effect
    const centralGeometry = new THREE.PlaneGeometry(1, 1); // Adjust size as needed
    const centralMaterial = new THREE.MeshBasicMaterial({ map: centralTexture, transparent: true });
    const centralPoint = new THREE.Mesh(centralGeometry, centralMaterial);

    // Ensure the plane faces the camera
    centralPoint.lookAt(camera.position); 

    scene.add(centralPoint);

    // --- DEBUG VISUALIZERS ---
    //const rayOrigin = new THREE.Vector3();
        //const rayDirection = new THREE.Vector3();
        //const rayLength = 1;
        //const rayColor = 0xD2d2d2;
        //const rayArrowHelper = new THREE.ArrowHelper(rayDirection, rayOrigin, rayLength, rayColor);
        //scene.add(rayArrowHelper)
    //

    const intersectionMarkerGeometry = new THREE.SphereGeometry(0.1, 8, 8);
    const intersectionMarkerMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });
    let currentIntersectionMarker: THREE.Mesh | null = null;
    // --- END DEBUG VISUALIZERS ---

    // CREATE SECTION DOTS
    sectionData.forEach(data => {
        const geometry = new THREE.SphereGeometry(DOT_SIZE, 32, 32);
        const material = new THREE.MeshBasicMaterial({ color: data.color });
        const dot = new THREE.Mesh(geometry, material);

        dot.position.x = Math.cos(data.angle) * data.radius;
        dot.position.z = Math.sin(data.angle) * data.radius;
        dot.position.y = 0;

        scene.add(dot);
        sectionDots.push(dot);

        if (data.name === 'Projects') {
            projectsMainDot = dot;
        }

        // TRAIL LOGIC
        const trailMaterial = new THREE.LineDashedMaterial({
            color: 0xffffff,
            dashSize: 1,
            gapSize: 0.5,
            linewidth: 0.5,
            scale: 1
        });

        const trailGeometry = new THREE.BufferGeometry();
        const positions = new Float32Array(MAX_TRAIL_POINTS * 3);
        trailGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3).setUsage(THREE.DynamicDrawUsage));

        const trailLine = new THREE.Line(trailGeometry, trailMaterial);
        scene.add(trailLine);

        // Store trail data and orbit parameters in dot's userData
        dot.userData = {
            name: data.name,
            link: data.link,
            originalAngle: data.angle,
            radius: data.radius,
            trailPoints: [],
            trailLine: trailLine
        };

        // Create and attach text label using CSS class
        const labelDiv = document.createElement('div');
        labelDiv.className = 'three-dot-label';
        labelDiv.textContent = data.name;
        const label = new CSS2DObject(labelDiv);
        label.position.set(0, DOT_SIZE * 2, 0);
        dot.add(label);
    });

    // ANIMATION
    function animate() {
        requestAnimationFrame(animate);
        controls.update();
        TWEEN.update();

        const orbitSpeedMultiplier = 0.070;
        const projectOrbitSpeedMultiplier = 0.030; // Slower orbit for project dots

        // Update main section dots
        sectionDots.forEach(dot => {
            dot.userData.originalAngle += orbitSpeedMultiplier / dot.userData.radius;
            dot.position.x = Math.cos(dot.userData.originalAngle) * dot.userData.radius;
            dot.position.z = Math.sin(dot.userData.originalAngle) * dot.userData.radius;

            const trailPoints = dot.userData.trailPoints;
            const trailLine = dot.userData.trailLine;

            trailPoints.push(new THREE.Vector3(dot.position.x, dot.position.y, dot.position.z));
            while (trailPoints.length > MAX_TRAIL_POINTS) {
                trailPoints.shift();
            }

            const positionsArray = trailLine.geometry.attributes.position.array;
            positionsArray.fill(0); // Ensure the buffer is zeroed out

            for (let i = 0; i < trailPoints.length; i++) {
                const point = trailPoints[i];
                positionsArray[i * 3] = point.x;
                positionsArray[i * 3 + 1] = point.y;
                positionsArray[i * 3 + 2] = point.z;
            }

            trailLine.geometry.setDrawRange(0, trailPoints.length);
            trailLine.geometry.attributes.position.needsUpdate = true;

            trailLine.computeLineDistances();
        });

        // Update project dots if expanded
        if (projectsExpanded && projectsMainDot) {
            projectDots.forEach(projectDot => {
                projectDot.userData.currentAngle += projectOrbitSpeedMultiplier / projectDot.userData.distance;

                const mainDotX = projectsMainDot!.position.x;
                const mainDotY = projectsMainDot!.position.y;
                const mainDotZ = projectsMainDot!.position.z;

                projectDot.position.x = mainDotX + Math.cos(projectDot.userData.currentAngle) * projectDot.userData.distance;
                projectDot.position.z = mainDotZ + Math.sin(projectDot.userData.currentAngle) * projectDot.userData.distance;
                projectDot.position.y = mainDotY + projectDot.userData.heightVariation;
            });
        }
        
        // Make the central image always face the camera
        centralPoint.lookAt(camera.position);

        updateConnectionLines();
        renderer.render(scene, camera);
        labelRenderer.render(scene, camera);
    }

    // WINDOW RESIZING
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        labelRenderer.setSize(window.innerWidth, window.innerHeight);
    }
    window.addEventListener('resize', onWindowResize);

    // Click event listener for dot interaction
    function onClick(event: MouseEvent) {
        // --- START FIX for mouse coordinates ---
        const canvas = renderer.domElement;
        const rect = canvas.getBoundingClientRect();

        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
        // --- END FIX for mouse coordinates ---

        raycaster.setFromCamera(mouse, camera);

        // Debug: Update Ray Visualizer
        //rayArrowHelper.position.copy(camera.position);
        //rayDirection.copy(raycaster.ray.direction);
        //rayArrowHelper.setDirection(rayDirection);

        // Debug: Show Intersection Marker
        if (currentIntersectionMarker) {
            scene.remove(currentIntersectionMarker);
            currentIntersectionMarker = null;
        }

        // Check project dots first (if expanded)
        if (projectsExpanded) {
            const projectIntersects = raycaster.intersectObjects(projectDots);
            if (projectIntersects.length > 0) {
                const clickedProject = projectIntersects[0].object;
                console.log('Clicked project:', clickedProject.userData.title);
                // Debug: Show Intersection Marker
                currentIntersectionMarker = new THREE.Mesh(intersectionMarkerGeometry, intersectionMarkerMaterial);
                currentIntersectionMarker.position.copy(projectIntersects[0].point);
                scene.add(currentIntersectionMarker);
                setTimeout(() => {
                    if (currentIntersectionMarker) {
                        scene.remove(currentIntersectionMarker);
                        currentIntersectionMarker = null;
                    }
                }, 500);
                window.location.href = `/projects/${clickedProject.userData.id}`;
                return;
            }
        }

        // Check main section dots
        const intersects = raycaster.intersectObjects(sectionDots);
        if (intersects.length > 0) {
            const clickedDot = intersects[0].object;

            // Debug: Show Intersection Marker
            currentIntersectionMarker = new THREE.Mesh(intersectionMarkerGeometry, intersectionMarkerMaterial);
            currentIntersectionMarker.position.copy(intersects[0].point);
            scene.add(currentIntersectionMarker);
            setTimeout(() => {
                if (currentIntersectionMarker) {
                    scene.remove(currentIntersectionMarker);
                    currentIntersectionMarker = null;
                }
            }, 500);

            if (clickedDot.userData.name === 'Projects') {
                if (projectsExpanded) {
                    removeProjectDots();
                } else {
                    createProjectDots();
                }
            } else {
                console.log('Clicked dot:', clickedDot.userData.name, 'Navigating to:', clickedDot.userData.link);
                window.location.href = clickedDot.userData.link;
            }
        }
    }

    window.addEventListener('click', onClick);

    // Start the animation
    animate();

    function createProjectDots() {
        if (!projectsMainDot || projectsExpanded) return;

        const baseRadius = 4;
        const maxRadius = 7;

        projectsData.forEach((project, index) => {
            const geometry = new THREE.SphereGeometry(DOT_SIZE * 0.4, 16, 16);
            const material = new THREE.MeshBasicMaterial({ color: 0xD3D3D3 });
            const projectDot = new THREE.Mesh(geometry, material);

            const sortedIndex = projectsData.length - 1 - index;
            const angle = (sortedIndex / projectsData.length) * Math.PI * 4;
            const distance = baseRadius + (sortedIndex / projectsData.length) * (maxRadius - baseRadius);

            const heightVariation = Math.sin(angle * 3) * 5;

            projectDot.position.x = projectsMainDot!.position.x + Math.cos(angle) * distance;
            projectDot.position.z = projectsMainDot!.position.z + Math.sin(angle) * distance;
            projectDot.position.y = projectsMainDot!.position.y + heightVariation;

            projectDot.userData = {
                ...project,
                isProjectDot: true,
                currentAngle: angle,
                distance: distance,
                heightVariation: heightVariation
            };

            scene.add(projectDot);
            projectDots.push(projectDot);

            const lineGeometry = new THREE.BufferGeometry();
            const linePositions = new Float32Array(6);
            lineGeometry.setAttribute('position', new THREE.BufferAttribute(linePositions, 3));

            const lineMaterial = new THREE.LineBasicMaterial({
                color: 0xffffff,
                opacity: 1,
                transparent: true,
            });
            const connectionLine = new THREE.Line(lineGeometry, lineMaterial);

            scene.add(connectionLine);
            connectionLines.push(connectionLine);

            const labelDiv = document.createElement('div');
            labelDiv.className = 'three-project-label';
            labelDiv.textContent = `${project.title} (${project.year})`;
            labelDiv.style.display = 'none';
            const label = new CSS2DObject(labelDiv);
            label.position.set(0, DOT_SIZE * 3, 0);
            projectDot.add(label);
        });

        projectsExpanded = true;
    }

    function removeProjectDots() {
        if (!projectsExpanded) return;

        projectDots.forEach(dot => {
            dot.traverse(object => {
                if (object instanceof CSS2DObject) {
                    object.element.remove();
                }
            });
            scene.remove(dot);
        });
        projectDots.length = 0;

        connectionLines.forEach(line => {
            scene.remove(line);
        });
        connectionLines.length = 0;

        projectsExpanded = false;
    }

    function updateConnectionLines() {
        if (!projectsExpanded || !projectsMainDot) return;

        connectionLines.forEach((line, index) => {
            const projectDot = projectDots[index];
            const positions = line.geometry.attributes.position.array;

            positions[0] = projectsMainDot!.position.x;
            positions[1] = projectsMainDot!.position.y;
            positions[2] = projectsMainDot!.position.z;

            positions[3] = projectDot.position.x;
            positions[4] = projectDot.position.y;
            positions[5] = projectDot.position.z;

            line.geometry.attributes.position.needsUpdate = true;
        });
    }

    function onMouseMove(event: MouseEvent) {
        // --- START FIX for mouse coordinates ---
        const canvas = renderer.domElement;
        const rect = canvas.getBoundingClientRect();

        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
        // --- END FIX for mouse coordinates ---

        raycaster.setFromCamera(mouse, camera);
        //rayArrowHelper.position.copy(camera.position);
        //rayDirection.copy(raycaster.ray.direction);
        //rayArrowHelper.setDirection(rayDirection);

        if (!projectsExpanded) return;

        const intersects = raycaster.intersectObjects(projectDots);

        projectDots.forEach(dot => {
            const label = dot.children.find((child: any) => child instanceof CSS2DObject);
            if (label) {
                label.element.style.display = 'none';
            }
        });

        if (intersects.length > 0) {
            const hoveredProject = intersects[0].object;
            const label = hoveredProject.children.find((child: any) => child instanceof CSS2DObject);
            if (label) {
                label.element.style.display = 'block';
            }
        }
    }

    window.addEventListener('mousemove', onMouseMove);

</script>